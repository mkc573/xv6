1. Which registers contain arguments to functions? 
   For example, which register holds 13 in main's call to printf?

   a0-a7寄存器保存了函数的参数，在`printf`中，参数13被存储在a2寄存器中。

2. Where is the call to function f in the assembly code for main? 
   Where is the call to g? (Hint: the compiler may inline functions.)

   没有这样的代码，g(x)被内链到f(x),f(x)被内链到main函数中。

3. At what address is the function printf located?

   地址位于 `30 + 1536 = 0x630` 处。

4. What value is in the register ra just after the jalr to printf in main?

   `ra`的值为`0x80000336`。

5. Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
   What is the output? Here's an ASCII table that maps bytes to characters.
   The output depends on that fact that the RISC-V is little-endian. 
   If the RISC-V were instead big-endian what 
   would you set i to in order to yield the same output?
   Would you need to change 57616 to a different value?

   上述代码输出为`HE110 World`。如果为大端法，i需要被更改为`0x726c6400`，
   57616不需要被改变。

6. In the following code, what is going to be
   printed after 'y='? (note: the answer is not a specific value.)
   Why does this happen?

	printf("x=%d y=%d", 3);

​   会打印出 `a2` 寄存器当前的值，因为在调用 `printf` 时，并未给 `a2` 寄存器赋值，
   但在`printf`被执行的时候却无法检查当前 `a2` 中的值是否为用户传入的值，而只是单纯的对其进行打印。

